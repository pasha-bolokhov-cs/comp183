;
; Author:	Pasha Bolokhov C0411819
; Displayed:
; Keyword:
;


	program palindrome
;;;
;;; A program for printing a string backwards
;;;

CONSOLE equ	1
GETSTR	equ	1
PUTCHAR equ	2
PUTSTR	equ	3
EXIT	equ	0xffff

BUF	equ	80
upper_A	equ	'A'
upper_Z	equ	'Z'
lower_A	equ	'a'
lower_Z	equ	'z'
allowed_len	equ	26 + 26 + 10


;;;
;;; Stack size
;;;
	stack	80


;;;
;;; Data section
;;;
	data
prompt	db	'Give a string [exit]: ', 0
yes	db	'It is a palindrome\n', 0
no	db	'It is *not* a palindrome\n', 0
bufsize	db	BUF + 1
size	db	?
buf	db	[?] * BUF + 1
allowed	db	'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'


;;;
;;; Text section
;;;
	code
palindrome					; program entry point
;
; Make a prompt
;
	mov	PUTSTR, r1
	lea	prompt, r2
	sys	CONSOLE

;
; Read in the string
;
	mov	GETSTR, r1
	lea	bufsize, r2
	sys	CONSOLE

;
; Check the string length
;
	lodbu	size,, r3
	cmp	r3, 0
	be	quit

;
;	r1 = is_palindrome(buf, size);
;
	lea	buf, r1
	lodbu	size,, r2
	call	is_palindrome

;
;	if (r1) {
;
	cmp	r1, 0
	be	assign_false
;
;		r2 = yes;
;
	lea	yes, r2
	br	print_answer
;
;	} else {
;		r2 = no;
;
assign_false
	lea	no, r2
;
;	}
;	
;	putstr(r2);
;
print_answer
	mov	PUTSTR, r1	
	sys	CONSOLE

;
; Start over
;
	br	palindrome


;
; Quit
;
quit
	sys	EXIT


;
; int16 is_palindrome(char *str, int16 len)
;
is_palindrome
	;
	; put the address of the last character into r3
	;
	add	r1, r2, r3
	dec	r3

	;
	; r1 and r3 are the running indices
	; r1 goes up, r3 goes down
	;
is_palindrome_loop
	cmp	r1, r3			; if (r1 >= r3)
	bae	return_true		;    goto return_true;
	xor	r4, r4
	xor	r5, r5
	lodbl	0, r1, r4
	lodbl	0, r3, r5

	;
	; pre-compare
	;
	cmp	r4, r5			; if (r4 != r5)
	bne	go_on			;    goto go_on;
	inc	r1			; skip the equal
	dec	r3			; characters
	br	is_palindrome_loop

go_on
	;
	; run r4 through the allowed set
	;
	lea	allowed, r6		; r6 = allowed;
	xor	r7, r7			; r7 is the counter
head_sym_allowed_loop
	xor	r8, r8
	lodbl	0, r6, r8		; r8 = *r6;
	cmp	r4, r8 			; if (r4 == r8)
	be	head_sym_to_lower	;    goto head_sym_to_lower;
	inc	r6			; r6++;
	inc	r7			; r7++;
	cmp	r7, allowed_len		; if (r7 < allowed_len)
	bb	head_sym_allowed_loop	;    goto head_sym_allowed_loop;

	; r4 not on 'allowed' set
	inc	r1			; skip it
	br	is_palindrome_loop

	; r4 is allowed, convert to lower case
head_sym_to_lower
	sub	r4, upper_A, r7		; r7 = r4 - upper_A;
	bs	head_sym_not_upper	; if (r7 < 0) goto head_sym_not_upper;
	cmp	r4, upper_Z
	ba	head_sym_not_upper	; if (r4 > upper_Z) goto head_sym_not_upper
	add	r7, lower_A, r4		; r4 = r7 + lower_A;
head_sym_not_upper

	;
	; run r5 through the allowed set
	;
	lea	allowed, r6		; r6 = allowed;
	xor	r7, r7			; r7 is the counter
tail_sym_allowed_loop
	xor	r8, r8			; r8 is the current symbol in the allowed table
	lodbl	0, r6, r8		; r8 = *r6;
	cmp	r5, r8 			; if (r5 == r8)
	be	tail_sym_to_lower	;    goto tail_sym_to_lower;
	inc	r6			; r6++;
	inc	r7			; r7++;
	cmp	r7, allowed_len		; if (r7 < allowed_len)
	bb	tail_sym_allowed_loop	;    goto tail_sym_allowed_loop;

	; r5 not on 'allowed' set
	dec	r3			; skip it
	br	is_palindrome_loop

	; r5 is allowed, convert to lower case
tail_sym_to_lower
	sub	r5, upper_A, r7		; r7 = r5 - upper_A;
	bs	tail_sym_not_upper	; if (r7 < 0) goto tail_sym_not_upper;
	cmp	r5, upper_Z
	ba	tail_sym_not_upper	; if (r5 > upper_Z) goto tail_sym_not_upper
	add	r7, lower_A, r5		; r5 = r7 + lower_A;
tail_sym_not_upper


	cmp	r4, r5			; if (r4 != r5)
	bne	return_false		;	goto return_false;
	inc	r1
	dec	r3
	br	is_palindrome_loop
	
return_true
	mov	1, r1
	ret	

return_false
	mov	0, r1
	ret

	end
